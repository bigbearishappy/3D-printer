---- PIN_Configuration Matches (2 in 2 files) ----
Pin.c (source_code\pin):void PIN_Configuration(void)
Pin.h (source_code\pin):void PIN_Configuration(void);
---- WRITE Matches (25 in 3 files) ----
Marlin_main.c (source_code\marlin):		WRITE(PS_ON_PIN, PS_ON_ASLEEP);
Stepper.c (source_code\motion_control\source_code):#define WRITE(pin, val)	GPIO_SetBits(GPIOB, GPIO_Pin_2)
Stepper.c (source_code\motion_control\source_code):		      WRITE(X_DIR_PIN, INVERT_X_DIR);
Stepper.c (source_code\motion_control\source_code):		      WRITE(X2_DIR_PIN, INVERT_X_DIR);
Stepper.c (source_code\motion_control\source_code):		      WRITE(X_DIR_PIN, !INVERT_X_DIR);
Stepper.c (source_code\motion_control\source_code):		      WRITE(X2_DIR_PIN, !INVERT_X_DIR);
Stepper.c (source_code\motion_control\source_code):		        WRITE(X2_DIR_PIN, !INVERT_X_DIR);
Stepper.c (source_code\motion_control\source_code):		        WRITE(X_DIR_PIN, !INVERT_X_DIR);
Stepper.c (source_code\motion_control\source_code):		    WRITE(Y2_DIR_PIN, !(INVERT_Y_DIR == INVERT_Y2_VS_Y_DIR));
Stepper.c (source_code\motion_control\source_code):		    WRITE(Y2_DIR_PIN, (INVERT_Y_DIR == INVERT_Y2_VS_Y_DIR));
Stepper.c (source_code\motion_control\source_code):		    WRITE(Z2_DIR_PIN,INVERT_Z_DIR);
Stepper.c (source_code\motion_control\source_code):		    WRITE(Z2_DIR_PIN,!INVERT_Z_DIR);
Stepper.c (source_code\motion_control\source_code):		        WRITE(X_STEP_PIN, !INVERT_X_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		        WRITE(X2_STEP_PIN, !INVERT_X_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		          WRITE(X_STEP_PIN, !INVERT_X_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		        WRITE(X_STEP_PIN, INVERT_X_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		        WRITE(X2_STEP_PIN, INVERT_X_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		          WRITE(X2_STEP_PIN, INVERT_X_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		          WRITE(X_STEP_PIN, INVERT_X_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):				WRITE(Y2_STEP_PIN, INVERT_Y_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		      WRITE(Z2_STEP_PIN, !INVERT_Z_STEP_PIN);
Stepper.c (source_code\motion_control\source_code):		      WRITE(Z2_STEP_PIN, INVERT_Z_STEP_PIN);
Stepper.h (source_code\motion_control\source_code):#define WRITE_E_STEP(v) WRITE(E0_STEP_PIN, v)
Stepper.h (source_code\motion_control\source_code):#define NORM_E_DIR() WRITE(E0_DIR_PIN, !INVERT_E0_DIR)
Stepper.h (source_code\motion_control\source_code):#define REV_E_DIR() WRITE(E0_DIR_PIN, INVERT_E0_DIR)
---- OCR1A_nominal Matches (2 in 1 files) ----
Stepper.c (source_code\motion_control\source_code):static unsigned short OCR1A_nominal;
Stepper.c (source_code\motion_control\source_code):  OCR1A_nominal = calc_timer(current_block->nominal_rate);
---- nominal_rate Matches (10 in 3 files) ----
Planner.c (source_code\motion_control\source_code):  unsigned long initial_rate = ceil(block->nominal_rate*entry_factor); // (step/min)
Planner.c (source_code\motion_control\source_code):  unsigned long final_rate = ceil(block->nominal_rate*exit_factor); // (step/min)
Planner.c (source_code\motion_control\source_code):    ceil(estimate_acceleration_distance(initial_rate, block->nominal_rate, acceleration));
Planner.c (source_code\motion_control\source_code):    floor(estimate_acceleration_distance(block->nominal_rate, final_rate, -acceleration));
Planner.c (source_code\motion_control\source_code):	block->nominal_rate = ceil(block->step_event_count * inverse_second); // (step/sec) Always > 0
Planner.c (source_code\motion_control\source_code):    	block->nominal_rate *= speed_factor;
Planner.h (source_code\motion_control\source_code):  unsigned long nominal_rate;                        // The nominal step rate for this block in step_events/sec 
Stepper.c (source_code\motion_control\source_code):  OCR1A_nominal = calc_timer(current_block->nominal_rate);
Stepper.c (source_code\motion_control\source_code):		  if(acc_step_rate > current_block->nominal_rate)
Stepper.c (source_code\motion_control\source_code):		    acc_step_rate = current_block->nominal_rate;
